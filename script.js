// –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
let currentDate = new Date();
let vakhtaStartDate = null;
let manualOverrides = {};
let isSakhalinMode = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadSavedData() {
    const saved = localStorage.getItem('vakhtaCalendarData');
    if (saved) {
        const data = JSON.parse(saved);
        if (data.vakhtaStartDate) {
            vakhtaStartDate = new Date(data.vakhtaStartDate);
        }
        if (data.manualOverrides) {
            manualOverrides = data.manualOverrides;
        }
        if (data.isSakhalinMode !== undefined) {
            isSakhalinMode = data.isSakhalinMode;
        }
    }
    updateScheduleButtons();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    const data = {
        vakhtaStartDate: vakhtaStartDate ? vakhtaStartDate.toISOString() : null,
        manualOverrides: manualOverrides,
        isSakhalinMode: isSakhalinMode
    };
    localStorage.setItem('vakhtaCalendarData', JSON.stringify(data));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function initCalendar() {
    loadSavedData();
    initTelegramApp();
    renderCalendar();
    setupEventListeners();
    updateLegendVisibility();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramApp() {
    if (window.Telegram && Telegram.WebApp) {
        Telegram.WebApp.expand();
        Telegram.WebApp.setHeaderColor('#2c3e50');
        Telegram.WebApp.setBackgroundColor('#1e3c72');
        
        Telegram.WebApp.BackButton.show();
        Telegram.WebApp.BackButton.onClick(() => {
            Telegram.WebApp.close();
        });
        
        console.log('Telegram Web App initialized');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.getElementById('prev-month').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    });
    
    document.getElementById('next-month').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    });
    
    document.getElementById('prev-year').addEventListener('click', () => {
        currentDate.setFullYear(currentDate.getFullYear() - 1);
        renderCalendar();
    });
    
    document.getElementById('next-year').addEventListener('click', () => {
        currentDate.setFullYear(currentDate.getFullYear() + 1);
        renderCalendar();
    });
    
    document.getElementById('today').addEventListener('click', () => {
        currentDate = new Date();
        renderCalendar();
    });
    
    document.getElementById('set-vakhta').addEventListener('click', setVakhtaStartDate);
    document.getElementById('show-stats').addEventListener('click', showStatistics);
    document.getElementById('reset-changes').addEventListener('click', resetManualChanges);
    document.getElementById('show-help').addEventListener('click', showHelp);
    
    document.getElementById('schedule-standard').addEventListener('click', setStandardSchedule);
    document.getElementById('schedule-sakhalin').addEventListener('click', setSakhalinSchedule);
    
    document.getElementById('current-month').addEventListener('click', showMonthYearPicker);
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
function setStandardSchedule() {
    isSakhalinMode = false;
    saveData();
    updateScheduleButtons();
    renderCalendar();
    updateLegendVisibility();
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–∞—Ö–∞–ª–∏–Ω—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫
function setSakhalinSchedule() {
    isSakhalinMode = true;
    saveData();
    updateScheduleButtons();
    renderCalendar();
    updateLegendVisibility();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function updateScheduleButtons() {
    const standardBtn = document.getElementById('schedule-standard');
    const sakhalinBtn = document.getElementById('schedule-sakhalin');
    
    if (standardBtn && sakhalinBtn) {
        if (isSakhalinMode) {
            standardBtn.classList.remove('active');
            sakhalinBtn.classList.add('active');
        } else {
            standardBtn.classList.add('active');
            sakhalinBtn.classList.remove('active');
        }
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –≤–∞—Ö—Ç—ã
function setVakhtaStartDate() {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    modal.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 10px; width: 90%; max-width: 300px;">
            <h3 style="margin-bottom: 15px; text-align: center;">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—Ö—Ç—ã</h3>
            
            <div style="margin-bottom: 15px;">
                <button id="quick-today" style="width: 100%; padding: 10px; background: #3498db; color: white; border: none; border-radius: 5px;">–í—ã–±—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è</button>
            </div>
            
            <input type="date" id="date-input" style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 5px;">
            
            <div style="display: flex; gap: 10px;">
                <button id="confirm-date" style="flex: 1; padding: 10px; background: #27ae60; color: white; border: none; border-radius: 5px;">OK</button>
                <button id="cancel-date" style="flex: 1; padding: 10px; background: #e74c3c; color: white; border: none; border-radius: 5px;">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    const dateInput = modal.querySelector('#date-input');
    const today = new Date();
    
    dateInput.value = today.toISOString().split('T')[0];
    
    modal.querySelector('#quick-today').addEventListener('click', () => {
        dateInput.value = today.toISOString().split('T')[0];
    });
    
    modal.querySelector('#confirm-date').addEventListener('click', () => {
        if (dateInput.value) {
            const inputDate = new Date(dateInput.value);
            if (!isNaN(inputDate.getTime())) {
                vakhtaStartDate = inputDate;
                saveData();
                renderCalendar();
                
                const formattedDate = inputDate.toLocaleDateString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
                
                alert(`–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–∞—Ö—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${formattedDate}`);
            }
        }
        document.body.removeChild(modal);
    });
    
    modal.querySelector('#cancel-date').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è
function calculateVakhtaStatus(date) {
    const dateStr = date.toISOString().split('T')[0];
    
    if (manualOverrides[dateStr]) {
        return manualOverrides[dateStr];
    }
    
    if (!vakhtaStartDate) return 'rest';
    
    const dateStart = new Date(date);
    dateStart.setHours(0, 0, 0, 0);
    
    const vakhtaStart = new Date(vakhtaStartDate);
    vakhtaStart.setHours(0, 0, 0, 0);
    
    const diffTime = dateStart.getTime() - vakhtaStart.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    const fullCycle = 56;
    const cycleDay = ((diffDays % fullCycle) + fullCycle) % fullCycle;
    
    if (isSakhalinMode) {
        // –†–µ–∂–∏–º –°–∞—Ö–∞–ª–∏–Ω–∞ 28/28 (–ø–æ–µ–∑–¥ –µ—Å—Ç—å, —Å–∞–º–æ–ª–µ—Ç–æ–≤ –Ω–µ—Ç)
        if (cycleDay === 55) return 'train';             // –ü–æ–µ–∑–¥ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∑–∞–µ–∑–¥–∞
        if (cycleDay === 0)  return 'travel-to';         // –ó–∞–µ–∑–¥
        if (cycleDay === 28) return 'travel-from';       // –í—ã–µ–∑–¥
        
        if (cycleDay >= 1 && cycleDay <= 14) return 'work-day';
        if (cycleDay >= 15 && cycleDay <= 27) return 'work-night';
        
        return 'rest';
        
    } else {
        // –†–µ–∂–∏–º —Å —Å–∞–º–æ–ª–µ—Ç–∞–º–∏ 28/28
        if (cycleDay === 54) return 'plane-from-home';   // –°–∞–º–æ–ª–µ—Ç –∑–∞ 2 –¥–Ω—è
        if (cycleDay === 55) return 'train';             // –ü–æ–µ–∑–¥ –∑–∞ 1 –¥–µ–Ω—å
        if (cycleDay === 0)  return 'travel-to';         // –ó–∞–µ–∑–¥
        if (cycleDay === 28) return 'travel-from';       // –í—ã–µ–∑–¥
        if (cycleDay === 29) return 'plane-to-home';     // –°–∞–º–æ–ª–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç
        
        if (cycleDay >= 1 && cycleDay <= 14) return 'work-day';
        if (cycleDay >= 15 && cycleDay <= 27) return 'work-night';
        
        return 'rest';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    switch(status) {
        case 'plane-from-home': return '‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç';
        case 'train': return 'üöÇ –ü–æ–µ–∑–¥';
        case 'travel-to': return '–ó–∞–µ–∑–¥ + –¥–µ–Ω—å';
        case 'work-day': return '–î–µ–Ω—å';
        case 'work-night': return '–ù–æ—á—å';
        case 'travel-from': return '–ù–æ—á—å + –≤—ã–µ–∑–¥';
        case 'plane-to-home': return '‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç';
        case 'rest': return '–û—Ç–¥—ã—Ö';
        case 'sick': return 'üü® –ë–æ–ª—å–Ω–∏—á–Ω—ã–π';
        case 'business-trip': return 'üß≥ –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞';
        case 'vacation': return 'üèñÔ∏è –û—Ç–ø—É—Å–∫';
        default: return '–û—Ç–¥—ã—Ö';
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è
function editDayManually(date) {
    const dateStr = date.toISOString().split('T')[0];
    const currentStatus = calculateVakhtaStatus(date);
    
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    modal.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 10px; width: 90%; max-width: 300px;">
            <h3 style="margin-bottom: 15px; text-align: center;">
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è<br>
                <small>${date.toLocaleDateString('ru-RU')}</small>
            </h3>
            
            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px;">–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</label>
                <div style="padding: 8px; background: #f8f9fa; border-radius: 5px; margin-bottom: 10px;">
                    ${getStatusText(currentStatus)}
                </div>
            </div>
            
            <select id="status-select" style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 5px;">
                <option value="auto">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–ø–æ –≥—Ä–∞—Ñ–∏–∫—É)</option>
                <option value="rest">–û—Ç–¥—ã—Ö</option>
                <option value="plane-from-home">‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç</option>
                <option value="train">üöÇ –ü–æ–µ–∑–¥</option>
                <option value="travel-to">–ó–∞–µ–∑–¥ + –¥–µ–Ω—å</option>
                <option value="work-day">–î–µ–Ω—å</option>
                <option value="work-night">–ù–æ—á—å</option>
                <option value="travel-from">–ù–æ—á—å + –≤—ã–µ–∑–¥</option>
                <option value="sick">üü® –ë–æ–ª—å–Ω–∏—á–Ω—ã–π</option>
                <option value="business-trip">üß≥ –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞</option>
                <option value="vacation">üèñÔ∏è –û—Ç–ø—É—Å–∫</option>
            </select>
            
            <div style="display: flex; gap: 10px;">
                <button id="save-edit" style="flex: 1; padding: 10px; background: #27ae60; color: white; border: none; border-radius: 5px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button id="cancel-edit" style="flex: 1; padding: 10px; background: #e74c3c; color: white; border: none; border-radius: 5px;">–û—Ç–º–µ–Ω–∞</button>
                ${manualOverrides[dateStr] ? `<button id="reset-edit" style="flex: 1; padding: 10px; background: #e67e22; color: white; border: none; border-radius: 5px;">–°–±—Ä–æ—Å–∏—Ç—å</button>` : ''}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    const select = modal.querySelector('#status-select');
    
    if (manualOverrides[dateStr]) {
        select.value = manualOverrides[dateStr];
    }
    
    modal.querySelector('#save-edit').addEventListener('click', () => {
        if (select.value === 'auto') {
            delete manualOverrides[dateStr];
        } else {
            manualOverrides[dateStr] = select.value;
        }
        saveData();
        renderCalendar();
        document.body.removeChild(modal);
    });
    
    if (manualOverrides[dateStr]) {
        modal.querySelector('#reset-edit').addEventListener('click', () => {
            delete manualOverrides[dateStr];
            saveData();
            renderCalendar();
            document.body.removeChild(modal);
        });
    }
    
    modal.querySelector('#cancel-edit').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ä—É—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
function resetManualChanges() {
    if (Object.keys(manualOverrides).length === 0) {
        alert('–ù–µ—Ç —Ä—É—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞');
        return;
    }
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        manualOverrides = {};
        saveData();
        renderCalendar();
        alert('–í—Å–µ —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function showStatistics() {
    const currentYear = currentDate.getFullYear();
    let stats = {
        sick: { total: 0, work: 0, rest: 0 },
        businessTrip: { total: 0, work: 0, rest: 0 },
        vacation: { total: 0, work: 0, rest: 0 }
    };
    
    Object.keys(manualOverrides).forEach(dateStr => {
        const date = new Date(dateStr);
        if (date.getFullYear() === currentYear) {
            const status = manualOverrides[dateStr];
            const autoStatus = calculateAutoStatus(date);
            
            if (status === 'sick') {
                stats.sick.total++;
                if (isWorkDay(autoStatus)) stats.sick.work++;
                else stats.sick.rest++;
            } else if (status === 'business-trip') {
                stats.businessTrip.total++;
                if (isWorkDay(autoStatus)) stats.businessTrip.work++;
                else stats.businessTrip.rest++;
            } else if (status === 'vacation') {
                stats.vacation.total++;
                if (isWorkDay(autoStatus)) stats.vacation.work++;
                else stats.vacation.rest++;
            }
        }
    });
    
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    modal.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 10px; width: 90%; max-width: 400px;">
            <h3 style="margin-bottom: 15px; text-align: center;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${currentYear} –≥–æ–¥</h3>
            
            <div style="margin-bottom: 15px;">
                <h4 style="margin-bottom: 10px; color: #f1c40f;">üü® –ë–æ–ª—å–Ω–∏—á–Ω—ã–µ:</h4>
                <div style="padding: 10px; background: #fffbf0; border-radius: 5px;">
                    –í—Å–µ–≥–æ: ${stats.sick.total} –¥–Ω–µ–π<br>
                    –í —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏: ${stats.sick.work} –¥–Ω–µ–π<br>
                    –í –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞: ${stats.sick.rest} –¥–Ω–µ–π
                </div>
            </div>
            
            <div style="margin-bottom: 15px;">
                <h4 style="margin-bottom: 10px; color: #1abc9c;">üß≥ –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏:</h4>
                <div style="padding: 10px; background: #f0f9f7; border-radius: 5px;">
                    –í—Å–µ–≥–æ: ${stats.businessTrip.total} –¥–Ω–µ–π<br>
                    –í —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏: ${stats.businessTrip.work} –¥–Ω–µ–π<br>
                    –í –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞: ${stats.businessTrip.rest} –¥–Ω–µ–π
                </div>
            </div>
            
            <div style="margin-bottom: 15px;">
                <h4 style="margin-bottom: 10px; color: #95a5a6;">üèñÔ∏è –û—Ç–ø—É—Å–∫:</h4>
                <div style="padding: 10px; background: #f8f9fa; border-radius: 5px;">
                    –í—Å–µ–≥–æ: ${stats.vacation.total} –¥–Ω–µ–π<br>
                    –í —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏: ${stats.vacation.work} –¥–Ω–µ–π<br>
                    –í –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞: ${stats.vacation.rest} –¥–Ω–µ–π
                </div>
            </div>
            
            <button id="close-stats" style="width: 100%; padding: 10px; background: #3498db; color: white; border: none; border-radius: 5px;">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.querySelector('#close-stats').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateAutoStatus(date) {
    if (!vakhtaStartDate) return 'rest';
    
    const dateStart = new Date(date);
    dateStart.setHours(0, 0, 0, 0);
    
    const vakhtaStart = new Date(vakhtaStartDate);
    vakhtaStart.setHours(0, 0, 0, 0);
    
    const diffTime = dateStart.getTime() - vakhtaStart.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    const fullCycle = 56;
    const cycleDay = ((diffDays % fullCycle) + fullCycle) % fullCycle;
    
    if (cycleDay === 54) return 'plane-from-home';
    if (cycleDay === 55) return 'train';
    if (cycleDay === 0)  return 'travel-to';
    if (cycleDay === 28) return 'travel-from';
    if (cycleDay === 29) return 'plane-to-home';
    
    if (cycleDay >= 1 && cycleDay <= 14) return 'work-day';
    if (cycleDay >= 15 && cycleDay <= 27) return 'work-night';
    
    return 'rest';
}

function isWorkDay(status) {
    const workStatuses = ['travel-to', 'work-day', 'work-night', 'travel-from'];
    return workStatuses.includes(status);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    modal.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 10px; width: 90%; max-width: 500px; max-height: 80vh; overflow-y: auto;">
            <h3 style="margin-bottom: 15px; text-align: center;">üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –≤–∞—Ö—Ç–æ–≤–∏–∫–∞</h3>
            
            <div style="margin-bottom: 20px;">
                <h4 style="color: #3498db; margin-bottom: 10px;">üéØ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞</h4>
                <p style="margin-bottom: 8px; line-height: 1.4;">
                    <strong>–ì—Ä–∞—Ñ–∏–∫ 28/28:</strong> 28 –¥–Ω–µ–π –≤–∞—Ö—Ç–∞ ‚Üí 28 –¥–Ω–µ–π –æ—Ç–¥—ã—Ö<br>
                    <strong>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ = –æ—Ç–¥—ã—Ö:</strong> –°–∞–º–æ–ª–µ—Ç –∏ –ø–æ–µ–∑–¥ —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–Ω—è–º–∏ –æ—Ç–¥—ã—Ö–∞<br>
                    <strong>–†–∞–±–æ—á–∏–µ –¥–Ω–∏:</strong> –ó–∞–µ–∑–¥, –¥–Ω–µ–≤–Ω—ã–µ/–Ω–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã, –≤—ã–µ–∑–¥
                </p>
            </div>
         

<!-- –í–°–¢–ê–í–ò–¢–¨ –≠–¢–û–¢ –ù–û–í–´–ô –†–ê–ó–î–ï–õ –°–Æ–î–ê ‚Üì -->
<div style="margin-bottom: 20px;">
    <h4 style="color: #3498db; margin-bottom: 10px;">üèùÔ∏è –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞</h4>
    <p style="margin-bottom: 8px; line-height: 1.4;">
        <strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫:</strong><br>
        ‚Ä¢ –î–ª—è –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ—Ç—è—Ç/–µ–¥—É—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç —Å –º–∞—Ç–µ—Ä–∏–∫–∞<br>
        ‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç –¥–Ω–∏ –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–∞
    </p>
    <p style="margin-bottom: 8px; line-height: 1.4;">
        <strong>–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –°–∞—Ö–∞–ª–∏–Ω–∞:</strong><br>
        ‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –°–∞—Ö–∞–ª–∏–Ω–µ<br> 
        ‚Ä¢ –ë–µ–∑ –¥–Ω–µ–π –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–∞ (—Å–∞–º–æ–ª–µ—Ç–æ–≤)
    </p>
    <p style="margin-bottom: 8px; line-height: 1.4;">
        –ê–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    </p>
</div>
            
           <div style="margin-bottom: 20px;">
    <h4 style="color: #3498db; margin-bottom: 10px;">üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º</h4>
    <div style="margin-bottom: 8px;">
        <strong>"–°—Ç–∞—Ä—Ç –≤–∞—Ö—Ç—ã"</strong> - –∑–∞–¥–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ —Ü–∏–∫–ª–∞
    </div>
    <div style="margin-bottom: 8px;">
        <strong>"–°–µ–≥–æ–¥–Ω—è"</strong> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
    </div>
    <div style="margin-bottom: 8px;">
        <strong>–ö–ª–∏–∫ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞</strong> - –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ª—é–±–æ–π –¥–∞—Ç–µ
    </div>
    <div style="margin-bottom: 8px;">
        <strong>–°—Ç—Ä–µ–ª–∫–∏ "–ú–µ—Å"/"–ì–æ–¥"</strong> - –ø–æ—à–∞–≥–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    </div>
    
</div>
            
            <div style="margin-bottom: 20px;">
                <h4 style="color: #3498db; margin-bottom: 10px;">‚úèÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
                <p style="margin-bottom: 8px; line-height: 1.4;">
                    <strong>–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å</strong> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä<br>
                    –ú–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–Ω—è –Ω–∞:<br>
                    ‚Ä¢ –ë–æ–ª—å–Ω–∏—á–Ω—ã–π üü®<br>
                    ‚Ä¢ –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ üß≥<br>
                    ‚Ä¢ –û—Ç–ø—É—Å–∫ üèñÔ∏è<br>
                    ‚Ä¢ –ò–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
                </p>
                <p style="margin-bottom: 8px; line-height: 1.4;">
                    <strong>–†—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong><br>
                    ‚Ä¢ –ü–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è –æ—Ä–∞–Ω–∂–µ–≤–æ–π —Ä–∞–º–∫–æ–π<br>
                    ‚Ä¢ –ù–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫<br>
                    ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                </p>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h4 style="color: #3498db; margin-bottom: 10px;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                <p style="margin-bottom: 8px; line-height: 1.4;">
                    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö, –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–ø—É—Å–∫–∞<br>
                    —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                </p>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h4 style="color: #3498db; margin-bottom: 10px;">üîÑ –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π</h4>
                <p style="margin-bottom: 8px; line-height: 1.4;">
                    –£–¥–∞–ª—è–µ—Ç –í–°–ï —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤–∞—Ö—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
                </p>
            </div>
            
            <div style="margin-bottom: 15px;">
                <h4 style="color: #3498db; margin-bottom: 10px;">üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h4>
                <p style="margin-bottom: 8px; line-height: 1.4;">
                    –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.<br>
                    –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.
                </p>
            </div>
            
            <button id="close-help" style="width: 100%; padding: 10px; background: #3498db; color: white; border: none; border-radius: 5px;">–ó–∞–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É</button>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.querySelector('#close-help').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
function showMonthYearPicker() {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();
    
    modal.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 10px; width: 90%; max-width: 320px;">
            <h3 style="margin-bottom: 15px; text-align: center;">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥</h3>
            
            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                <select id="year-select" style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    ${generateYearOptions(currentYear)}
                </select>
                <select id="month-select" style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    ${generateMonthOptions(currentMonth)}
                </select>
            </div>
            
            <div style="display: flex; gap: 10px;">
                <button id="confirm-picker" style="flex: 1; padding: 10px; background: #27ae60; color: white; border: none; border-radius: 5px;">OK</button>
                <button id="cancel-picker" style="flex: 1; padding: 10px; background: #e74c3c; color: white; border: none; border-radius: 5px;">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.querySelector('#confirm-picker').addEventListener('click', () => {
        const yearSelect = modal.querySelector('#year-select');
        const monthSelect = modal.querySelector('#month-select');
        
        const selectedYear = parseInt(yearSelect.value);
        const selectedMonth = parseInt(monthSelect.value);
        
        currentDate.setFullYear(selectedYear, selectedMonth, 1);
        renderCalendar();
        document.body.removeChild(modal);
    });
    
    modal.querySelector('#cancel-picker').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –¥–ª—è –≥–æ–¥–æ–≤ (–æ—Ç -5 –¥–æ +5 –ª–µ—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ)
function generateYearOptions(currentYear) {
    let options = '';
    const startYear = currentYear - 5;
    const endYear = currentYear + 5;
    
    for (let year = startYear; year <= endYear; year++) {
        const selected = year === currentYear ? 'selected' : '';
        options += `<option value="${year}" ${selected}>${year}</option>`;
    }
    
    return options;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –¥–ª—è –º–µ—Å—è—Ü–µ–≤
function generateMonthOptions(currentMonth) {
    const months = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    
    let options = '';
    months.forEach((month, index) => {
        const selected = index === currentMonth ? 'selected' : '';
        options += `<option value="${index}" ${selected}>${month}</option>`;
    });
    
    return options;
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —Å–∞–º–æ–ª–µ—Ç–æ–≤ –≤ –ª–µ–≥–µ–Ω–¥–µ
function updateLegendVisibility() {
    const planeLegend = document.getElementById('legend-plane');
    if (planeLegend) {
        planeLegend.style.display = isSakhalinMode ? 'none' : 'flex';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
function createDayElement(date, isOtherMonth) {
    const dayEl = document.createElement('div');
    
    let dayClasses = ['day'];
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (date.getTime() === today.getTime()) {
        dayClasses.push('today');
    }
    
    if (isOtherMonth) {
        dayClasses.push('other-month');
    }
    
    const status = calculateVakhtaStatus(date);
    dayClasses.push(`status-${status}`);
    
    const dateStr = date.toISOString().split('T')[0];
    if (manualOverrides[dateStr]) {
        dayClasses.push('manual-override');
    }
    
    dayEl.className = dayClasses.join(' ');
    
    dayEl.innerHTML = `
        <div class="day-number">${date.getDate()}</div>
        <div class="day-status">${getStatusText(status)}</div>
    `;
    
    dayEl.addEventListener('dblclick', () => {
        editDayManually(date);
    });
    
    return dayEl;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    const calendarEl = document.getElementById('calendar');
    const currentMonthEl = document.getElementById('current-month');
    
    while (calendarEl.children.length > 7) {
        calendarEl.removeChild(calendarEl.lastChild);
    }
    
    currentMonthEl.textContent = currentDate.toLocaleDateString('ru-RU', {
        month: 'long',
        year: 'numeric'
    });
    
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    let firstDayOfWeek = firstDay.getDay();
    firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
    
    const prevMonthLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0).getDate();
    for (let i = firstDayOfWeek - 1; i >= 0; i--) {
        const day = prevMonthLastDay - i;
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, day);
        const dayEl = createDayElement(date, true);
        calendarEl.appendChild(dayEl);
    }
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
        const dayEl = createDayElement(date, false);
        calendarEl.appendChild(dayEl);
    }
    
    const totalCells = 35;
    const daysSoFar = firstDayOfWeek + lastDay.getDate();
    const nextMonthDays = totalCells - daysSoFar;
    
    for (let day = 1; day <= nextMonthDays; day++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, day);
        const dayEl = createDayElement(date, true);
        calendarEl.appendChild(dayEl);
    }
    
    updateLegendVisibility();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

document.addEventListener('DOMContentLoaded', initCalendar);
